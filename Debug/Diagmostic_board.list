
Diagmostic_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004620  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800475c  0800475c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800475c  0800475c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800475c  0800475c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000010  08004774  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08004774  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f9bb  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222d  00000000  00000000  0002fa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  00031c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4b  00000000  00000000  00032bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001846d  00000000  00000000  0003383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012683  00000000  00000000  0004bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d8ef  00000000  00000000  0005e32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004304  00000000  00000000  000ebc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000eff20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004718 	.word	0x08004718

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004718 	.word	0x08004718

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	0000      	movs	r0, r0
	...

08000760 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
#endif
#ifdef APB2
    APBfq = HAL_RCC_GetPCLK2Freq();
 8000766:	f002 fc15 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 800076a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <ARGB_Init+0xd8>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <ARGB_Init+0x1c>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <ARGB_Init+0x1e>
 800077c:	2302      	movs	r3, #2
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	fb02 f303 	mul.w	r3, r2, r3
 8000786:	607b      	str	r3, [r7, #4]
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	4a2b      	ldr	r2, [pc, #172]	; (800083c <ARGB_Init+0xdc>)
 800078e:	fba2 2303 	umull	r2, r3, r2, r3
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <ARGB_Init+0xe0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <ARGB_Init+0xe0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <ARGB_Init+0xe0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2201      	movs	r2, #1
 80007b2:	615a      	str	r2, [r3, #20]
#if defined(WS2811F) || defined(WS2811S)
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us/1.2us
    PWM_LO = (u8_t) (APBfq * 0.20) - 1;     // Log.0 - 20% - 0.25us/0.5us
#endif
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff37 	bl	8000628 <__aeabi_ui2d>
 80007ba:	a31b      	add	r3, pc, #108	; (adr r3, 8000828 <ARGB_Init+0xc8>)
 80007bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c0:	f7ff fcc6 	bl	8000150 <__aeabi_dmul>
 80007c4:	4602      	mov	r2, r0
 80007c6:	460b      	mov	r3, r1
 80007c8:	4610      	mov	r0, r2
 80007ca:	4619      	mov	r1, r3
 80007cc:	f7ff ffa6 	bl	800071c <__aeabi_d2uiz>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3b01      	subs	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <ARGB_Init+0xe4>)
 80007da:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff23 	bl	8000628 <__aeabi_ui2d>
 80007e2:	a313      	add	r3, pc, #76	; (adr r3, 8000830 <ARGB_Init+0xd0>)
 80007e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007e8:	f7ff fcb2 	bl	8000150 <__aeabi_dmul>
 80007ec:	4602      	mov	r2, r0
 80007ee:	460b      	mov	r3, r1
 80007f0:	4610      	mov	r0, r2
 80007f2:	4619      	mov	r1, r3
 80007f4:	f7ff ff92 	bl	800071c <__aeabi_d2uiz>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	3b01      	subs	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <ARGB_Init+0xe8>)
 8000802:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST = ARGB_READY; // Set Ready Flag
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <ARGB_Init+0xec>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <ARGB_Init+0xe0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2201      	movs	r2, #1
 8000810:	2108      	movs	r1, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fc03 	bl	800401e <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000818:	2001      	movs	r0, #1
 800081a:	f000 ff35 	bl	8001688 <HAL_Delay>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	1eb851ec 	.word	0x1eb851ec
 800082c:	3fe1eb85 	.word	0x3fe1eb85
 8000830:	1eb851ec 	.word	0x1eb851ec
 8000834:	3fd1eb85 	.word	0x3fd1eb85
 8000838:	40021000 	.word	0x40021000
 800083c:	014f8b59 	.word	0x014f8b59
 8000840:	20000134 	.word	0x20000134
 8000844:	2000002c 	.word	0x2000002c
 8000848:	2000002d 	.word	0x2000002d
 800084c:	2000004e 	.word	0x2000004e

08000850 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <ARGB_SetBrightness+0x1c>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000

08000870 <ARGB_SetRGB>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB(u16_t i, u8_t r, u8_t g, u8_t b) {
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4604      	mov	r4, r0
 8000878:	4608      	mov	r0, r1
 800087a:	4611      	mov	r1, r2
 800087c:	461a      	mov	r2, r3
 800087e:	4623      	mov	r3, r4
 8000880:	80fb      	strh	r3, [r7, #6]
 8000882:	4603      	mov	r3, r0
 8000884:	717b      	strb	r3, [r7, #5]
 8000886:	460b      	mov	r3, r1
 8000888:	713b      	strb	r3, [r7, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	2b09      	cmp	r3, #9
 8000892:	d910      	bls.n	80008b6 <ARGB_SetRGB+0x46>
        u16_t _i = i / NUM_PIXELS;
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	4a31      	ldr	r2, [pc, #196]	; (800095c <ARGB_SetRGB+0xec>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	461a      	mov	r2, r3
 80008a4:	0352      	lsls	r2, r2, #13
 80008a6:	1ad2      	subs	r2, r2, r3
 80008a8:	0092      	lsls	r2, r2, #2
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	4413      	add	r3, r2
 80008b4:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <ARGB_SetRGB+0xf0>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3301      	adds	r3, #1
 80008be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80008c6:	797a      	ldrb	r2, [r7, #5]
 80008c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80008cc:	717b      	strb	r3, [r7, #5]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <ARGB_SetRGB+0xf0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3301      	adds	r3, #1
 80008d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008da:	fb92 f3f3 	sdiv	r3, r2, r3
 80008de:	793a      	ldrb	r2, [r7, #4]
 80008e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80008e4:	713b      	strb	r3, [r7, #4]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <ARGB_SetRGB+0xf0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	3301      	adds	r3, #1
 80008ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80008f6:	78fa      	ldrb	r2, [r7, #3]
 80008f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80008fc:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 80008fe:	793b      	ldrb	r3, [r7, #4]
 8000900:	21b0      	movs	r1, #176	; 0xb0
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f851 	bl	80009aa <scale8>
 8000908:	4603      	mov	r3, r0
 800090a:	713b      	strb	r3, [r7, #4]
    b = scale8(b, 0xF0);
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	21f0      	movs	r1, #240	; 0xf0
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f84a 	bl	80009aa <scale8>
 8000916:	4603      	mov	r3, r0
 8000918:	70fb      	strb	r3, [r7, #3]
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
    const u8_t subp2 = g;
    const u8_t subp3 = b;
#else
    const u8_t subp1 = g;
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = r;
 800091e:	797b      	ldrb	r3, [r7, #5]
 8000920:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	72fb      	strb	r3, [r7, #11]
#ifdef SK6812
    RGB_BUF[4 * i] = subp1;     // subpixel 1
    RGB_BUF[4 * i + 1] = subp2; // subpixel 2
    RGB_BUF[4 * i + 2] = subp3; // subpixel 3
#else
    RGB_BUF[3 * i] = subp1;     // subpixel 1
 8000926:	88fa      	ldrh	r2, [r7, #6]
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <ARGB_SetRGB+0xf4>)
 8000930:	7b7a      	ldrb	r2, [r7, #13]
 8000932:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 1] = subp2; // subpixel 2
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	3301      	adds	r3, #1
 800093e:	4909      	ldr	r1, [pc, #36]	; (8000964 <ARGB_SetRGB+0xf4>)
 8000940:	7b3a      	ldrb	r2, [r7, #12]
 8000942:	54ca      	strb	r2, [r1, r3]
    RGB_BUF[3 * i + 2] = subp3; // subpixel 3
 8000944:	88fa      	ldrh	r2, [r7, #6]
 8000946:	4613      	mov	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4413      	add	r3, r2
 800094c:	3302      	adds	r3, #2
 800094e:	4905      	ldr	r1, [pc, #20]	; (8000964 <ARGB_SetRGB+0xf4>)
 8000950:	7afa      	ldrb	r2, [r7, #11]
 8000952:	54ca      	strb	r2, [r1, r3]
#endif
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	cccccccd 	.word	0xcccccccd
 8000960:	20000000 	.word	0x20000000
 8000964:	20000030 	.word	0x20000030

08000968 <ARGB_FillRGB>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB(u8_t r, u8_t g, u8_t b) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	460b      	mov	r3, r1
 8000974:	71bb      	strb	r3, [r7, #6]
 8000976:	4613      	mov	r3, r2
 8000978:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800097a:	2300      	movs	r3, #0
 800097c:	81fb      	strh	r3, [r7, #14]
 800097e:	e00b      	b.n	8000998 <ARGB_FillRGB+0x30>
        ARGB_SetRGB(i, r, g, b);
 8000980:	89fb      	ldrh	r3, [r7, #14]
 8000982:	b298      	uxth	r0, r3
 8000984:	797b      	ldrb	r3, [r7, #5]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	79f9      	ldrb	r1, [r7, #7]
 800098a:	f7ff ff71 	bl	8000870 <ARGB_SetRGB>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800098e:	89fb      	ldrh	r3, [r7, #14]
 8000990:	b29b      	uxth	r3, r3
 8000992:	3301      	adds	r3, #1
 8000994:	b29b      	uxth	r3, r3
 8000996:	81fb      	strh	r3, [r7, #14]
 8000998:	89fb      	ldrh	r3, [r7, #14]
 800099a:	b29b      	uxth	r3, r3
 800099c:	2b09      	cmp	r3, #9
 800099e:	d9ef      	bls.n	8000980 <ARGB_FillRGB+0x18>
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	460a      	mov	r2, r1
 80009b4:	71fb      	strb	r3, [r7, #7]
 80009b6:	4613      	mov	r3, r2
 80009b8:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	79ba      	ldrb	r2, [r7, #6]
 80009be:	fb02 f303 	mul.w	r3, r2, r3
 80009c2:	121b      	asrs	r3, r3, #8
 80009c4:	b2db      	uxtb	r3, r3
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fdf6 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f91e 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f000 fb24 	bl	8001028 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009e0:	f000 f960 	bl	8000ca4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80009e4:	f000 f98c 	bl	8000d00 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009e8:	f000 fa0e 	bl	8000e08 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009ec:	f000 fa8c 	bl	8000f08 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80009f0:	f000 faf0 	bl	8000fd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80009f4:	2100      	movs	r1, #0
 80009f6:	4879      	ldr	r0, [pc, #484]	; (8000bdc <main+0x20c>)
 80009f8:	f002 fc40 	bl	800327c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80009fc:	2104      	movs	r1, #4
 80009fe:	4877      	ldr	r0, [pc, #476]	; (8000bdc <main+0x20c>)
 8000a00:	f002 fc3c 	bl	800327c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000a04:	2108      	movs	r1, #8
 8000a06:	4875      	ldr	r0, [pc, #468]	; (8000bdc <main+0x20c>)
 8000a08:	f002 fc38 	bl	800327c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000a0c:	210c      	movs	r1, #12
 8000a0e:	4873      	ldr	r0, [pc, #460]	; (8000bdc <main+0x20c>)
 8000a10:	f002 fc34 	bl	800327c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a14:	2100      	movs	r1, #0
 8000a16:	4872      	ldr	r0, [pc, #456]	; (8000be0 <main+0x210>)
 8000a18:	f002 fc30 	bl	800327c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4870      	ldr	r0, [pc, #448]	; (8000be0 <main+0x210>)
 8000a20:	f002 fc2c 	bl	800327c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000a24:	2108      	movs	r1, #8
 8000a26:	486e      	ldr	r0, [pc, #440]	; (8000be0 <main+0x210>)
 8000a28:	f002 fc28 	bl	800327c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000a2c:	210c      	movs	r1, #12
 8000a2e:	486c      	ldr	r0, [pc, #432]	; (8000be0 <main+0x210>)
 8000a30:	f002 fc24 	bl	800327c <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a34:	2108      	movs	r1, #8
 8000a36:	486b      	ldr	r0, [pc, #428]	; (8000be4 <main+0x214>)
 8000a38:	f002 fb2e 	bl	8003098 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000a3c:	210c      	movs	r1, #12
 8000a3e:	4869      	ldr	r0, [pc, #420]	; (8000be4 <main+0x214>)
 8000a40:	f002 fb2a 	bl	8003098 <HAL_TIM_PWM_Start>
	INA219_Init(&sensor_1, &hi2c1, 0x40);
 8000a44:	2240      	movs	r2, #64	; 0x40
 8000a46:	4968      	ldr	r1, [pc, #416]	; (8000be8 <main+0x218>)
 8000a48:	4868      	ldr	r0, [pc, #416]	; (8000bec <main+0x21c>)
 8000a4a:	f003 fdc9 	bl	80045e0 <INA219_Init>
	INA219_Init(&sensor_2, &hi2c1, 0x41);
 8000a4e:	2241      	movs	r2, #65	; 0x41
 8000a50:	4965      	ldr	r1, [pc, #404]	; (8000be8 <main+0x218>)
 8000a52:	4867      	ldr	r0, [pc, #412]	; (8000bf0 <main+0x220>)
 8000a54:	f003 fdc4 	bl	80045e0 <INA219_Init>
	INA219_Init(&sensor_3, &hi2c1, 0x44);
 8000a58:	2244      	movs	r2, #68	; 0x44
 8000a5a:	4963      	ldr	r1, [pc, #396]	; (8000be8 <main+0x218>)
 8000a5c:	4865      	ldr	r0, [pc, #404]	; (8000bf4 <main+0x224>)
 8000a5e:	f003 fdbf 	bl	80045e0 <INA219_Init>
	INA219_Init(&sensor_4, &hi2c1, 0x45);
 8000a62:	2245      	movs	r2, #69	; 0x45
 8000a64:	4960      	ldr	r1, [pc, #384]	; (8000be8 <main+0x218>)
 8000a66:	4864      	ldr	r0, [pc, #400]	; (8000bf8 <main+0x228>)
 8000a68:	f003 fdba 	bl	80045e0 <INA219_Init>
	ARGB_Init();
 8000a6c:	f7ff fe78 	bl	8000760 <ARGB_Init>
	ARGB_SetBrightness(255);
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	f7ff feed 	bl	8000850 <ARGB_SetBrightness>

	buffer[0] = 0xff;
 8000a76:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <main+0x22c>)
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0xfd;
 8000a7c:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <main+0x22c>)
 8000a7e:	22fd      	movs	r2, #253	; 0xfd
 8000a80:	705a      	strb	r2, [r3, #1]
	/* Infinite loop */
		  /* USER CODE BEGIN WHILE */
		  while (1)
		  {

			  HAL_GPIO_WritePin(GPIOC, 13, SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	210d      	movs	r1, #13
 8000a86:	485e      	ldr	r0, [pc, #376]	; (8000c00 <main+0x230>)
 8000a88:	f001 f8b4 	bl	8001bf4 <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */
//	  	  INA219GetAll(&sensor_1);
//	 	  INA219GetAll(&sensor_2);
//	 	  INA219GetAll(&sensor_3);
//	 	  INA219GetAll(&sensor_4);
		buffer[2] = (sensor_1.voltage >> 8) & 0xff;
 8000a8c:	4b57      	ldr	r3, [pc, #348]	; (8000bec <main+0x21c>)
 8000a8e:	88db      	ldrh	r3, [r3, #6]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b59      	ldr	r3, [pc, #356]	; (8000bfc <main+0x22c>)
 8000a98:	709a      	strb	r2, [r3, #2]
		buffer[3] = (sensor_1.voltage >> 0) & 0xff;
 8000a9a:	4b54      	ldr	r3, [pc, #336]	; (8000bec <main+0x21c>)
 8000a9c:	88db      	ldrh	r3, [r3, #6]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b56      	ldr	r3, [pc, #344]	; (8000bfc <main+0x22c>)
 8000aa2:	70da      	strb	r2, [r3, #3]
		buffer[4] = (sensor_2.voltage >> 8) & 0xff;
 8000aa4:	4b52      	ldr	r3, [pc, #328]	; (8000bf0 <main+0x220>)
 8000aa6:	88db      	ldrh	r3, [r3, #6]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b53      	ldr	r3, [pc, #332]	; (8000bfc <main+0x22c>)
 8000ab0:	711a      	strb	r2, [r3, #4]
		buffer[5] = (sensor_3.voltage >> 0) & 0xff;
 8000ab2:	4b50      	ldr	r3, [pc, #320]	; (8000bf4 <main+0x224>)
 8000ab4:	88db      	ldrh	r3, [r3, #6]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b50      	ldr	r3, [pc, #320]	; (8000bfc <main+0x22c>)
 8000aba:	715a      	strb	r2, [r3, #5]
		buffer[6] = (sensor_3.voltage >> 8) & 0xff;
 8000abc:	4b4d      	ldr	r3, [pc, #308]	; (8000bf4 <main+0x224>)
 8000abe:	88db      	ldrh	r3, [r3, #6]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <main+0x22c>)
 8000ac8:	719a      	strb	r2, [r3, #6]
		buffer[7] = (sensor_3.voltage >> 0) & 0xff;
 8000aca:	4b4a      	ldr	r3, [pc, #296]	; (8000bf4 <main+0x224>)
 8000acc:	88db      	ldrh	r3, [r3, #6]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <main+0x22c>)
 8000ad2:	71da      	strb	r2, [r3, #7]
		buffer[8] = (sensor_4.voltage >> 8) & 0xff;
 8000ad4:	4b48      	ldr	r3, [pc, #288]	; (8000bf8 <main+0x228>)
 8000ad6:	88db      	ldrh	r3, [r3, #6]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <main+0x22c>)
 8000ae0:	721a      	strb	r2, [r3, #8]
		buffer[9] = (sensor_4.voltage >> 0) & 0xff;
 8000ae2:	4b45      	ldr	r3, [pc, #276]	; (8000bf8 <main+0x228>)
 8000ae4:	88db      	ldrh	r3, [r3, #6]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <main+0x22c>)
 8000aea:	725a      	strb	r2, [r3, #9]
		buffer[10] = (sensor_1.current >> 8) & 0xff;
 8000aec:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <main+0x21c>)
 8000aee:	891b      	ldrh	r3, [r3, #8]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <main+0x22c>)
 8000af8:	729a      	strb	r2, [r3, #10]
		buffer[11] = (sensor_1.current >> 0) & 0xff;
 8000afa:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <main+0x21c>)
 8000afc:	891b      	ldrh	r3, [r3, #8]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <main+0x22c>)
 8000b02:	72da      	strb	r2, [r3, #11]
		buffer[12] = (sensor_2.current >> 8) & 0xff;
 8000b04:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <main+0x220>)
 8000b06:	891b      	ldrh	r3, [r3, #8]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <main+0x22c>)
 8000b10:	731a      	strb	r2, [r3, #12]
		buffer[13] = (sensor_3.current >> 0) & 0xff;
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <main+0x224>)
 8000b14:	891b      	ldrh	r3, [r3, #8]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <main+0x22c>)
 8000b1a:	735a      	strb	r2, [r3, #13]
		buffer[14] = (sensor_3.current >> 8) & 0xff;
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <main+0x224>)
 8000b1e:	891b      	ldrh	r3, [r3, #8]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <main+0x22c>)
 8000b28:	739a      	strb	r2, [r3, #14]
		buffer[15] = (sensor_3.current >> 0) & 0xff;
 8000b2a:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <main+0x224>)
 8000b2c:	891b      	ldrh	r3, [r3, #8]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <main+0x22c>)
 8000b32:	73da      	strb	r2, [r3, #15]
		buffer[16] = (sensor_4.current >> 8) & 0xff;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <main+0x228>)
 8000b36:	891b      	ldrh	r3, [r3, #8]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <main+0x22c>)
 8000b40:	741a      	strb	r2, [r3, #16]
		buffer[17] = (sensor_4.current >> 0) & 0xff;
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <main+0x228>)
 8000b44:	891b      	ldrh	r3, [r3, #8]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <main+0x22c>)
 8000b4a:	745a      	strb	r2, [r3, #17]
		buffer[18] = pwm_1.long_imp;
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	; (8000c04 <main+0x234>)
 8000b4e:	7a9a      	ldrb	r2, [r3, #10]
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <main+0x22c>)
 8000b52:	749a      	strb	r2, [r3, #18]
		buffer[19] = pwm_2.long_imp;
 8000b54:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <main+0x238>)
 8000b56:	7a9a      	ldrb	r2, [r3, #10]
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <main+0x22c>)
 8000b5a:	74da      	strb	r2, [r3, #19]
		buffer[20] = pwm_3.long_imp;
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <main+0x23c>)
 8000b5e:	7a9a      	ldrb	r2, [r3, #10]
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <main+0x22c>)
 8000b62:	751a      	strb	r2, [r3, #20]
		buffer[21] = pwm_4.long_imp;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <main+0x240>)
 8000b66:	7a9a      	ldrb	r2, [r3, #10]
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <main+0x22c>)
 8000b6a:	755a      	strb	r2, [r3, #21]
		if((sensor_1.current > 2000) || (sensor_2.current > 2000) || (sensor_3.current > 2000) || (sensor_4.current > 2000)){
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <main+0x21c>)
 8000b6e:	891b      	ldrh	r3, [r3, #8]
 8000b70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b74:	d80e      	bhi.n	8000b94 <main+0x1c4>
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <main+0x220>)
 8000b78:	891b      	ldrh	r3, [r3, #8]
 8000b7a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b7e:	d809      	bhi.n	8000b94 <main+0x1c4>
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <main+0x224>)
 8000b82:	891b      	ldrh	r3, [r3, #8]
 8000b84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b88:	d804      	bhi.n	8000b94 <main+0x1c4>
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <main+0x228>)
 8000b8c:	891b      	ldrh	r3, [r3, #8]
 8000b8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b92:	d905      	bls.n	8000ba0 <main+0x1d0>
			ARGB_FillRGB(255, 0, 0);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	20ff      	movs	r0, #255	; 0xff
 8000b9a:	f7ff fee5 	bl	8000968 <ARGB_FillRGB>
 8000b9e:	e012      	b.n	8000bc6 <main+0x1f6>

		} else if ((sensor_1.voltage < 9) || (sensor_2.voltage < 9)) {
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <main+0x21c>)
 8000ba2:	88db      	ldrh	r3, [r3, #6]
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d903      	bls.n	8000bb0 <main+0x1e0>
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <main+0x220>)
 8000baa:	88db      	ldrh	r3, [r3, #6]
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	d805      	bhi.n	8000bbc <main+0x1ec>
			ARGB_FillRGB(255, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	20ff      	movs	r0, #255	; 0xff
 8000bb6:	f7ff fed7 	bl	8000968 <ARGB_FillRGB>
 8000bba:	e004      	b.n	8000bc6 <main+0x1f6>
		} else {
			ARGB_FillRGB(0, 255, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	21ff      	movs	r1, #255	; 0xff
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fed1 	bl	8000968 <ARGB_FillRGB>
		}
	 	  HAL_Delay(100);
 8000bc6:	2064      	movs	r0, #100	; 0x64
 8000bc8:	f000 fd5e 	bl	8001688 <HAL_Delay>
	 	  HAL_UART_Transmit(&huart1, buffer, 25, 100);
 8000bcc:	2364      	movs	r3, #100	; 0x64
 8000bce:	2219      	movs	r2, #25
 8000bd0:	490a      	ldr	r1, [pc, #40]	; (8000bfc <main+0x22c>)
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <main+0x244>)
 8000bd4:	f003 fb08 	bl	80041e8 <HAL_UART_Transmit>
			  HAL_GPIO_WritePin(GPIOC, 13, SET);
 8000bd8:	e753      	b.n	8000a82 <main+0xb2>
 8000bda:	bf00      	nop
 8000bdc:	200000a4 	.word	0x200000a4
 8000be0:	200000ec 	.word	0x200000ec
 8000be4:	20000134 	.word	0x20000134
 8000be8:	20000050 	.word	0x20000050
 8000bec:	200001c4 	.word	0x200001c4
 8000bf0:	200001d0 	.word	0x200001d0
 8000bf4:	200001dc 	.word	0x200001dc
 8000bf8:	200001e8 	.word	0x200001e8
 8000bfc:	20000234 	.word	0x20000234
 8000c00:	40011000 	.word	0x40011000
 8000c04:	200001f4 	.word	0x200001f4
 8000c08:	20000204 	.word	0x20000204
 8000c0c:	20000214 	.word	0x20000214
 8000c10:	20000224 	.word	0x20000224
 8000c14:	2000017c 	.word	0x2000017c

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	; 0x40
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	2228      	movs	r2, #40	; 0x28
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fd4a 	bl	80046c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000c56:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 fdb9 	bl	80027d8 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c6c:	f000 fa96 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2102      	movs	r1, #2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 f826 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c96:	f000 fa81 	bl	800119c <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3740      	adds	r7, #64	; 0x40
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000caa:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <MX_I2C1_Init+0x54>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cb0:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MX_I2C1_Init+0x58>)
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_I2C1_Init+0x50>)
 8000ce2:	f000 ff9f 	bl	8001c24 <HAL_I2C_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cec:	f000 fa56 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000050 	.word	0x20000050
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	000186a0 	.word	0x000186a0

08000d00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d1c:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d1e:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <MX_TIM1_Init+0x104>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 629;
 8000d22:	4b37      	ldr	r3, [pc, #220]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d24:	f240 2275 	movw	r2, #629	; 0x275
 8000d28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d32:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000d36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d4a:	482d      	ldr	r0, [pc, #180]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d4c:	f002 fa46 	bl	80031dc <HAL_TIM_IC_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d56:	f000 fa21 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	4825      	ldr	r0, [pc, #148]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d6a:	f003 f97d 	bl	8004068 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d74:	f000 fa12 	bl	800119c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d88:	463b      	mov	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	481c      	ldr	r0, [pc, #112]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000d90:	f002 fc88 	bl	80036a4 <HAL_TIM_IC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d9a:	f000 f9ff 	bl	800119c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000da2:	2302      	movs	r3, #2
 8000da4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	2204      	movs	r2, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4814      	ldr	r0, [pc, #80]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000dae:	f002 fc79 	bl	80036a4 <HAL_TIM_IC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000db8:	f000 f9f0 	bl	800119c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000dcc:	f002 fc6a 	bl	80036a4 <HAL_TIM_IC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000dd6:	f000 f9e1 	bl	800119c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dde:	2302      	movs	r3, #2
 8000de0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	220c      	movs	r2, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_TIM1_Init+0x100>)
 8000dea:	f002 fc5b 	bl	80036a4 <HAL_TIM_IC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000df4:	f000 f9d2 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200000a4 	.word	0x200000a4
 8000e04:	40012c00 	.word	0x40012c00

08000e08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	f107 0310 	add.w	r3, r7, #16
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e24:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 629;
 8000e2c:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e2e:	f240 2275 	movw	r2, #629	; 0x275
 8000e32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e3c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e4e:	482d      	ldr	r0, [pc, #180]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e50:	f002 f9c4 	bl	80031dc <HAL_TIM_IC_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e5a:	f000 f99f 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4825      	ldr	r0, [pc, #148]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e6e:	f003 f8fb 	bl	8004068 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000e78:	f000 f990 	bl	800119c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	481c      	ldr	r0, [pc, #112]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000e94:	f002 fc06 	bl	80036a4 <HAL_TIM_IC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e9e:	f000 f97d 	bl	800119c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2204      	movs	r2, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4814      	ldr	r0, [pc, #80]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000eb2:	f002 fbf7 	bl	80036a4 <HAL_TIM_IC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000ebc:	f000 f96e 	bl	800119c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2208      	movs	r2, #8
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000ed0:	f002 fbe8 	bl	80036a4 <HAL_TIM_IC_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000eda:	f000 f95f 	bl	800119c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	220c      	movs	r2, #12
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_TIM2_Init+0xfc>)
 8000eee:	f002 fbd9 	bl	80036a4 <HAL_TIM_IC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000ef8:	f000 f950 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000ec 	.word	0x200000ec

08000f08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <MX_TIM3_Init+0xc8>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 629;
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f32:	f240 2275 	movw	r2, #629	; 0x275
 8000f36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2499;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f40:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f52:	481e      	ldr	r0, [pc, #120]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f54:	f002 f850 	bl	8002ff8 <HAL_TIM_PWM_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f5e:	f000 f91d 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f72:	f003 f879 	bl	8004068 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f7c:	f000 f90e 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f80:	2360      	movs	r3, #96	; 0x60
 8000f82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2208      	movs	r2, #8
 8000f94:	4619      	mov	r1, r3
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000f98:	f002 fc20 	bl	80037dc <HAL_TIM_PWM_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000fa2:	f000 f8fb 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	220c      	movs	r2, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000fae:	f002 fc15 	bl	80037dc <HAL_TIM_PWM_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000fb8:	f000 f8f0 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <MX_TIM3_Init+0xc4>)
 8000fbe:	f000 fa0d 	bl	80013dc <HAL_TIM_MspPostInit>

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000134 	.word	0x20000134
 8000fd0:	40000400 	.word	0x40000400

08000fd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	; (8001024 <MX_USART1_UART_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART1_UART_Init+0x4c>)
 800100c:	f003 f89c 	bl	8004148 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001016:	f000 f8c1 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000017c 	.word	0x2000017c
 8001024:	40013800 	.word	0x40013800

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_GPIO_Init+0x58>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <MX_GPIO_Init+0x58>)
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_GPIO_Init+0x58>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_GPIO_Init+0x58>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <MX_GPIO_Init+0x58>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_GPIO_Init+0x58>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_GPIO_Init+0x58>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <MX_GPIO_Init+0x58>)
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	6193      	str	r3, [r2, #24]
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <MX_GPIO_Init+0x58>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a3b      	ldr	r2, [pc, #236]	; (8001180 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d135      	bne.n	8001102 <HAL_TIM_IC_CaptureCallback+0x7e>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7f1b      	ldrb	r3, [r3, #28]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d116      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0x48>
			pwm_1.start = pwm_1.end_per;
 800109e:	4b39      	ldr	r3, [pc, #228]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010a0:	889a      	ldrh	r2, [r3, #4]
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010a4:	801a      	strh	r2, [r3, #0]
			pwm_1.end_per = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80010a6:	2100      	movs	r1, #0
 80010a8:	4837      	ldr	r0, [pc, #220]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x104>)
 80010aa:	f002 fc59 	bl	8003960 <HAL_TIM_ReadCapturedValue>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b34      	ldr	r3, [pc, #208]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010b4:	809a      	strh	r2, [r3, #4]
			pwm_1.end_imp = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 80010b6:	2104      	movs	r1, #4
 80010b8:	4833      	ldr	r0, [pc, #204]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x104>)
 80010ba:	f002 fc51 	bl	8003960 <HAL_TIM_ReadCapturedValue>
 80010be:	4603      	mov	r3, r0
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010c4:	805a      	strh	r2, [r3, #2]
			CALC_FREQ(&pwm_1);
 80010c6:	482f      	ldr	r0, [pc, #188]	; (8001184 <HAL_TIM_IC_CaptureCallback+0x100>)
 80010c8:	f003 fabc 	bl	8004644 <CALC_FREQ>
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7f1b      	ldrb	r3, [r3, #28]
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d116      	bne.n	8001102 <HAL_TIM_IC_CaptureCallback+0x7e>
			pwm_2.start = pwm_2.end_per;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <HAL_TIM_IC_CaptureCallback+0x108>)
 80010d6:	889a      	ldrh	r2, [r3, #4]
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_TIM_IC_CaptureCallback+0x108>)
 80010da:	801a      	strh	r2, [r3, #0]
			pwm_2.end_per = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 80010dc:	2108      	movs	r1, #8
 80010de:	482a      	ldr	r0, [pc, #168]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x104>)
 80010e0:	f002 fc3e 	bl	8003960 <HAL_TIM_ReadCapturedValue>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_TIM_IC_CaptureCallback+0x108>)
 80010ea:	809a      	strh	r2, [r3, #4]
			pwm_2.end_imp = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);
 80010ec:	210c      	movs	r1, #12
 80010ee:	4826      	ldr	r0, [pc, #152]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x104>)
 80010f0:	f002 fc36 	bl	8003960 <HAL_TIM_ReadCapturedValue>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <HAL_TIM_IC_CaptureCallback+0x108>)
 80010fa:	805a      	strh	r2, [r3, #2]
			CALC_FREQ(&pwm_2);
 80010fc:	4823      	ldr	r0, [pc, #140]	; (800118c <HAL_TIM_IC_CaptureCallback+0x108>)
 80010fe:	f003 faa1 	bl	8004644 <CALC_FREQ>
		}

	}
	if (htim->Instance == TIM2) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110a:	d135      	bne.n	8001178 <HAL_TIM_IC_CaptureCallback+0xf4>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7f1b      	ldrb	r3, [r3, #28]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d116      	bne.n	8001142 <HAL_TIM_IC_CaptureCallback+0xbe>
			pwm_3.start = pwm_3.end_per;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001116:	889a      	ldrh	r2, [r3, #4]
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800111a:	801a      	strh	r2, [r3, #0]
			pwm_3.end_per = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800111c:	2100      	movs	r1, #0
 800111e:	481d      	ldr	r0, [pc, #116]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001120:	f002 fc1e 	bl	8003960 <HAL_TIM_ReadCapturedValue>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800112a:	809a      	strh	r2, [r3, #4]
			pwm_3.end_imp = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800112c:	2104      	movs	r1, #4
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001130:	f002 fc16 	bl	8003960 <HAL_TIM_ReadCapturedValue>
 8001134:	4603      	mov	r3, r0
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800113a:	805a      	strh	r2, [r3, #2]
			CALC_FREQ(&pwm_3);
 800113c:	4814      	ldr	r0, [pc, #80]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800113e:	f003 fa81 	bl	8004644 <CALC_FREQ>
		}
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7f1b      	ldrb	r3, [r3, #28]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d116      	bne.n	8001178 <HAL_TIM_IC_CaptureCallback+0xf4>
			pwm_4.start = pwm_4.end_per;
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x114>)
 800114c:	889a      	ldrh	r2, [r3, #4]
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001150:	801a      	strh	r2, [r3, #0]
			pwm_4.end_per = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_3);
 8001152:	2108      	movs	r1, #8
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001156:	f002 fc03 	bl	8003960 <HAL_TIM_ReadCapturedValue>
 800115a:	4603      	mov	r3, r0
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001160:	809a      	strh	r2, [r3, #4]
			pwm_4.end_imp = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_4);
 8001162:	210c      	movs	r1, #12
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001166:	f002 fbfb 	bl	8003960 <HAL_TIM_ReadCapturedValue>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001170:	805a      	strh	r2, [r3, #2]
			CALC_FREQ(&pwm_4);
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001174:	f003 fa66 	bl	8004644 <CALC_FREQ>
		}
	}
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40012c00 	.word	0x40012c00
 8001184:	200001f4 	.word	0x200001f4
 8001188:	200000a4 	.word	0x200000a4
 800118c:	20000204 	.word	0x20000204
 8001190:	20000214 	.word	0x20000214
 8001194:	200000ec 	.word	0x200000ec
 8001198:	20000224 	.word	0x20000224

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_MspInit+0x5c>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a14      	ldr	r2, [pc, #80]	; (8001204 <HAL_MspInit+0x5c>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_MspInit+0x5c>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_MspInit+0x5c>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_MspInit+0x5c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_MspInit+0x5c>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_MspInit+0x60>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_MspInit+0x60>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000

0800120c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_I2C_MspInit+0x90>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d132      	bne.n	8001292 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <HAL_I2C_MspInit+0x94>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_I2C_MspInit+0x94>)
 8001232:	f043 0308 	orr.w	r3, r3, #8
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_I2C_MspInit+0x94>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001244:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124a:	2312      	movs	r3, #18
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <HAL_I2C_MspInit+0x98>)
 800125a:	f000 fb47 	bl	80018ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_I2C_MspInit+0x9c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
 8001274:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_I2C_MspInit+0x9c>)
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_I2C_MspInit+0x94>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_I2C_MspInit+0x94>)
 8001280:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_I2C_MspInit+0x94>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40005400 	.word	0x40005400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010c00 	.word	0x40010c00
 80012a8:	40010000 	.word	0x40010000

080012ac <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0318 	add.w	r3, r7, #24
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a33      	ldr	r2, [pc, #204]	; (8001394 <HAL_TIM_IC_MspInit+0xe8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d12d      	bne.n	8001328 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a31      	ldr	r2, [pc, #196]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 80012d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b29      	ldr	r3, [pc, #164]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80012fc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	4619      	mov	r1, r3
 8001310:	4822      	ldr	r0, [pc, #136]	; (800139c <HAL_TIM_IC_MspInit+0xf0>)
 8001312:	f000 faeb 	bl	80018ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	201b      	movs	r0, #27
 800131c:	f000 faaf 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001320:	201b      	movs	r0, #27
 8001322:	f000 fac8 	bl	80018b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001326:	e030      	b.n	800138a <HAL_TIM_IC_MspInit+0xde>
  else if(htim_ic->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d12b      	bne.n	800138a <HAL_TIM_IC_MspInit+0xde>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	61d3      	str	r3, [r2, #28]
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	6193      	str	r3, [r2, #24]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_TIM_IC_MspInit+0xec>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001362:	2305      	movs	r3, #5
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	4619      	mov	r1, r3
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <HAL_TIM_IC_MspInit+0xf0>)
 8001376:	f000 fab9 	bl	80018ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	201c      	movs	r0, #28
 8001380:	f000 fa7d 	bl	800187e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001384:	201c      	movs	r0, #28
 8001386:	f000 fa96 	bl	80018b6 <HAL_NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40012c00 	.word	0x40012c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40010800 	.word	0x40010800

080013a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <HAL_TIM_PWM_MspInit+0x34>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10b      	bne.n	80013ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_TIM_PWM_MspInit+0x38>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_TIM_PWM_MspInit+0x38>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_TIM_PWM_MspInit+0x38>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40000400 	.word	0x40000400
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_TIM_MspPostInit+0x58>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d117      	bne.n	800142c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_TIM_MspPostInit+0x5c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_TIM_MspPostInit+0x5c>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_TIM_MspPostInit+0x5c>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001414:	2303      	movs	r3, #3
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_TIM_MspPostInit+0x60>)
 8001428:	f000 fa60 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40000400 	.word	0x40000400
 8001438:	40021000 	.word	0x40021000
 800143c:	40010c00 	.word	0x40010c00

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <HAL_UART_MspInit+0xa4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d13d      	bne.n	80014dc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_UART_MspInit+0xa8>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <HAL_UART_MspInit+0xa8>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6193      	str	r3, [r2, #24]
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <HAL_UART_MspInit+0xa8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_UART_MspInit+0xa8>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a1a      	ldr	r2, [pc, #104]	; (80014e8 <HAL_UART_MspInit+0xa8>)
 800147e:	f043 0308 	orr.w	r3, r3, #8
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0xa8>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4812      	ldr	r0, [pc, #72]	; (80014ec <HAL_UART_MspInit+0xac>)
 80014a4:	f000 fa22 	bl	80018ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <HAL_UART_MspInit+0xac>)
 80014bc:	f000 fa16 	bl	80018ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_UART_MspInit+0xb0>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
 80014d6:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_UART_MspInit+0xb0>)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010c00 	.word	0x40010c00
 80014f0:	40010000 	.word	0x40010000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f889 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM1_CC_IRQHandler+0x10>)
 800154a:	f001 ffa3 	bl	8003494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000a4 	.word	0x200000a4

08001558 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM2_IRQHandler+0x10>)
 800155e:	f001 ff99 	bl	8003494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200000ec 	.word	0x200000ec

0800156c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001578:	f7ff fff8 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800157e:	490c      	ldr	r1, [pc, #48]	; (80015b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001594:	4c09      	ldr	r4, [pc, #36]	; (80015bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a2:	f003 f895 	bl	80046d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a6:	f7ff fa13 	bl	80009d0 <main>
  bx lr
 80015aa:	4770      	bx	lr
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015b4:	08004764 	.word	0x08004764
  ldr r2, =_sbss
 80015b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015bc:	2000025c 	.word	0x2000025c

080015c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_2_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_Init+0x28>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_Init+0x28>)
 80015ce:	f043 0310 	orr.w	r3, r3, #16
 80015d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f947 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015da:	200f      	movs	r0, #15
 80015dc:	f000 f808 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e0:	f7ff fde2 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_InitTick+0x58>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f95f 	bl	80018d2 <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f000 f927 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	; (800164c <HAL_InitTick+0x5c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000004 	.word	0x20000004
 8001648:	2000000c 	.word	0x2000000c
 800164c:	20000008 	.word	0x20000008

08001650 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x1c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_IncTick+0x20>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a03      	ldr	r2, [pc, #12]	; (8001670 <HAL_IncTick+0x20>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	2000000c 	.word	0x2000000c
 8001670:	20000250 	.word	0x20000250

08001674 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <HAL_GetTick+0x10>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	20000250 	.word	0x20000250

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff fff0 	bl	8001674 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffe0 	bl	8001674 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	2000000c 	.word	0x2000000c

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4906      	ldr	r1, [pc, #24]	; (8001768 <__NVIC_EnableIRQ+0x34>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	; (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	; 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	; 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff90 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff2d 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff42 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff90 	bl	80017c0 <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5f 	bl	800176c <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff35 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa2 	bl	8001824 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b08b      	sub	sp, #44	; 0x2c
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fe:	e169      	b.n	8001bd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001900:	2201      	movs	r2, #1
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 8158 	bne.w	8001bce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4a9a      	ldr	r2, [pc, #616]	; (8001b8c <HAL_GPIO_Init+0x2a0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d05e      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 8001928:	4a98      	ldr	r2, [pc, #608]	; (8001b8c <HAL_GPIO_Init+0x2a0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d875      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 800192e:	4a98      	ldr	r2, [pc, #608]	; (8001b90 <HAL_GPIO_Init+0x2a4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d058      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 8001934:	4a96      	ldr	r2, [pc, #600]	; (8001b90 <HAL_GPIO_Init+0x2a4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d86f      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 800193a:	4a96      	ldr	r2, [pc, #600]	; (8001b94 <HAL_GPIO_Init+0x2a8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d052      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 8001940:	4a94      	ldr	r2, [pc, #592]	; (8001b94 <HAL_GPIO_Init+0x2a8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d869      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 8001946:	4a94      	ldr	r2, [pc, #592]	; (8001b98 <HAL_GPIO_Init+0x2ac>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d04c      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 800194c:	4a92      	ldr	r2, [pc, #584]	; (8001b98 <HAL_GPIO_Init+0x2ac>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d863      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 8001952:	4a92      	ldr	r2, [pc, #584]	; (8001b9c <HAL_GPIO_Init+0x2b0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d046      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
 8001958:	4a90      	ldr	r2, [pc, #576]	; (8001b9c <HAL_GPIO_Init+0x2b0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d85d      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 800195e:	2b12      	cmp	r3, #18
 8001960:	d82a      	bhi.n	80019b8 <HAL_GPIO_Init+0xcc>
 8001962:	2b12      	cmp	r3, #18
 8001964:	d859      	bhi.n	8001a1a <HAL_GPIO_Init+0x12e>
 8001966:	a201      	add	r2, pc, #4	; (adr r2, 800196c <HAL_GPIO_Init+0x80>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	080019e7 	.word	0x080019e7
 8001970:	080019c1 	.word	0x080019c1
 8001974:	080019d3 	.word	0x080019d3
 8001978:	08001a15 	.word	0x08001a15
 800197c:	08001a1b 	.word	0x08001a1b
 8001980:	08001a1b 	.word	0x08001a1b
 8001984:	08001a1b 	.word	0x08001a1b
 8001988:	08001a1b 	.word	0x08001a1b
 800198c:	08001a1b 	.word	0x08001a1b
 8001990:	08001a1b 	.word	0x08001a1b
 8001994:	08001a1b 	.word	0x08001a1b
 8001998:	08001a1b 	.word	0x08001a1b
 800199c:	08001a1b 	.word	0x08001a1b
 80019a0:	08001a1b 	.word	0x08001a1b
 80019a4:	08001a1b 	.word	0x08001a1b
 80019a8:	08001a1b 	.word	0x08001a1b
 80019ac:	08001a1b 	.word	0x08001a1b
 80019b0:	080019c9 	.word	0x080019c9
 80019b4:	080019dd 	.word	0x080019dd
 80019b8:	4a79      	ldr	r2, [pc, #484]	; (8001ba0 <HAL_GPIO_Init+0x2b4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019be:	e02c      	b.n	8001a1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e029      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	3304      	adds	r3, #4
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e024      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	3308      	adds	r3, #8
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e01f      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	330c      	adds	r3, #12
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e01a      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d102      	bne.n	80019f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ee:	2304      	movs	r3, #4
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e013      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	611a      	str	r2, [r3, #16]
          break;
 8001a06:	e009      	b.n	8001a1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	615a      	str	r2, [r3, #20]
          break;
 8001a12:	e003      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
          break;
 8001a18:	e000      	b.n	8001a1c <HAL_GPIO_Init+0x130>
          break;
 8001a1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2bff      	cmp	r3, #255	; 0xff
 8001a20:	d801      	bhi.n	8001a26 <HAL_GPIO_Init+0x13a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	e001      	b.n	8001a2a <HAL_GPIO_Init+0x13e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d802      	bhi.n	8001a38 <HAL_GPIO_Init+0x14c>
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x152>
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3b08      	subs	r3, #8
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	210f      	movs	r1, #15
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80b1 	beq.w	8001bce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	; (8001ba4 <HAL_GPIO_Init+0x2b8>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b4a      	ldr	r3, [pc, #296]	; (8001ba4 <HAL_GPIO_Init+0x2b8>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a84:	4a48      	ldr	r2, [pc, #288]	; (8001ba8 <HAL_GPIO_Init+0x2bc>)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a40      	ldr	r2, [pc, #256]	; (8001bac <HAL_GPIO_Init+0x2c0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_GPIO_Init+0x1ec>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a3f      	ldr	r2, [pc, #252]	; (8001bb0 <HAL_GPIO_Init+0x2c4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_GPIO_Init+0x1e8>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <HAL_GPIO_Init+0x2c8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d007      	beq.n	8001ad0 <HAL_GPIO_Init+0x1e4>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3d      	ldr	r2, [pc, #244]	; (8001bb8 <HAL_GPIO_Init+0x2cc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_GPIO_Init+0x1e0>
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e006      	b.n	8001ada <HAL_GPIO_Init+0x1ee>
 8001acc:	2304      	movs	r3, #4
 8001ace:	e004      	b.n	8001ada <HAL_GPIO_Init+0x1ee>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e002      	b.n	8001ada <HAL_GPIO_Init+0x1ee>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_GPIO_Init+0x1ee>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001adc:	f002 0203 	and.w	r2, r2, #3
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	4093      	lsls	r3, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aea:	492f      	ldr	r1, [pc, #188]	; (8001ba8 <HAL_GPIO_Init+0x2bc>)
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	492c      	ldr	r1, [pc, #176]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4928      	ldr	r1, [pc, #160]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4922      	ldr	r1, [pc, #136]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	491e      	ldr	r1, [pc, #120]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4918      	ldr	r1, [pc, #96]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4914      	ldr	r1, [pc, #80]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d021      	beq.n	8001bc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	490e      	ldr	r1, [pc, #56]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
 8001b88:	e021      	b.n	8001bce <HAL_GPIO_Init+0x2e2>
 8001b8a:	bf00      	nop
 8001b8c:	10320000 	.word	0x10320000
 8001b90:	10310000 	.word	0x10310000
 8001b94:	10220000 	.word	0x10220000
 8001b98:	10210000 	.word	0x10210000
 8001b9c:	10120000 	.word	0x10120000
 8001ba0:	10110000 	.word	0x10110000
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010000 	.word	0x40010000
 8001bac:	40010800 	.word	0x40010800
 8001bb0:	40010c00 	.word	0x40010c00
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40011400 	.word	0x40011400
 8001bbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_GPIO_Init+0x304>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4909      	ldr	r1, [pc, #36]	; (8001bf0 <HAL_GPIO_Init+0x304>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f47f ae8e 	bne.w	8001900 <HAL_GPIO_Init+0x14>
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	372c      	adds	r7, #44	; 0x2c
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c10:	e003      	b.n	8001c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e12b      	b.n	8001e8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fade 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2224      	movs	r2, #36	; 0x24
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c88:	f001 f970 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8001c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4a81      	ldr	r2, [pc, #516]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d807      	bhi.n	8001ca8 <HAL_I2C_Init+0x84>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a80      	ldr	r2, [pc, #512]	; (8001e9c <HAL_I2C_Init+0x278>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	bf94      	ite	ls
 8001ca0:	2301      	movls	r3, #1
 8001ca2:	2300      	movhi	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	e006      	b.n	8001cb6 <HAL_I2C_Init+0x92>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4a7d      	ldr	r2, [pc, #500]	; (8001ea0 <HAL_I2C_Init+0x27c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bf94      	ite	ls
 8001cb0:	2301      	movls	r3, #1
 8001cb2:	2300      	movhi	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0e7      	b.n	8001e8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a78      	ldr	r2, [pc, #480]	; (8001ea4 <HAL_I2C_Init+0x280>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9b      	lsrs	r3, r3, #18
 8001cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a6a      	ldr	r2, [pc, #424]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d802      	bhi.n	8001cf8 <HAL_I2C_Init+0xd4>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	e009      	b.n	8001d0c <HAL_I2C_Init+0xe8>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	4a69      	ldr	r2, [pc, #420]	; (8001ea8 <HAL_I2C_Init+0x284>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	099b      	lsrs	r3, r3, #6
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	495c      	ldr	r1, [pc, #368]	; (8001e98 <HAL_I2C_Init+0x274>)
 8001d28:	428b      	cmp	r3, r1
 8001d2a:	d819      	bhi.n	8001d60 <HAL_I2C_Init+0x13c>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e59      	subs	r1, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3a:	1c59      	adds	r1, r3, #1
 8001d3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d40:	400b      	ands	r3, r1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_I2C_Init+0x138>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1e59      	subs	r1, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5a:	e051      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	e04f      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_I2C_Init+0x168>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1e58      	subs	r0, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6859      	ldr	r1, [r3, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	440b      	add	r3, r1
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	bf0c      	ite	eq
 8001d84:	2301      	moveq	r3, #1
 8001d86:	2300      	movne	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	e012      	b.n	8001db2 <HAL_I2C_Init+0x18e>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	0099      	lsls	r1, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Init+0x196>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e022      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10e      	bne.n	8001de0 <HAL_I2C_Init+0x1bc>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1e58      	subs	r0, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6859      	ldr	r1, [r3, #4]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	440b      	add	r3, r1
 8001dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dde:	e00f      	b.n	8001e00 <HAL_I2C_Init+0x1dc>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e58      	subs	r0, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	0099      	lsls	r1, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	6809      	ldr	r1, [r1, #0]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6911      	ldr	r1, [r2, #16]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68d2      	ldr	r2, [r2, #12]
 8001e3a:	4311      	orrs	r1, r2
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	000186a0 	.word	0x000186a0
 8001e9c:	001e847f 	.word	0x001e847f
 8001ea0:	003d08ff 	.word	0x003d08ff
 8001ea4:	431bde83 	.word	0x431bde83
 8001ea8:	10624dd3 	.word	0x10624dd3

08001eac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af02      	add	r7, sp, #8
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	817b      	strh	r3, [r7, #10]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	813b      	strh	r3, [r7, #8]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ec6:	f7ff fbd5 	bl	8001674 <HAL_GetTick>
 8001eca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	f040 80d9 	bne.w	800208c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2319      	movs	r3, #25
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	496d      	ldr	r1, [pc, #436]	; (8002098 <HAL_I2C_Mem_Write+0x1ec>)
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fa9f 	bl	8002428 <I2C_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e0cc      	b.n	800208e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_I2C_Mem_Write+0x56>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e0c5      	b.n	800208e <HAL_I2C_Mem_Write+0x1e2>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d007      	beq.n	8001f28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2221      	movs	r2, #33	; 0x21
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a4d      	ldr	r2, [pc, #308]	; (800209c <HAL_I2C_Mem_Write+0x1f0>)
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f6a:	88f8      	ldrh	r0, [r7, #6]
 8001f6c:	893a      	ldrh	r2, [r7, #8]
 8001f6e:	8979      	ldrh	r1, [r7, #10]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4603      	mov	r3, r0
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f9be 	bl	80022fc <I2C_RequestMemoryWrite>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d052      	beq.n	800202c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e081      	b.n	800208e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fb64 	bl	800265c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00d      	beq.n	8001fb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d107      	bne.n	8001fb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06b      	b.n	800208e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d11b      	bne.n	800202c <HAL_I2C_Mem_Write+0x180>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d017      	beq.n	800202c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	781a      	ldrb	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1aa      	bne.n	8001f8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fb57 	bl	80026ec <I2C_WaitOnBTFFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2b04      	cmp	r3, #4
 800204a:	d107      	bne.n	800205c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e016      	b.n	800208e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
  }
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	00100002 	.word	0x00100002
 800209c:	ffff0000 	.word	0xffff0000

080020a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	460b      	mov	r3, r1
 80020ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff fae0 	bl	8001674 <HAL_GetTick>
 80020b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	f040 8111 	bne.w	80022ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2319      	movs	r3, #25
 80020ce:	2201      	movs	r2, #1
 80020d0:	4988      	ldr	r1, [pc, #544]	; (80022f4 <HAL_I2C_IsDeviceReady+0x254>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9a8 	bl	8002428 <I2C_WaitOnFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	e104      	b.n	80022ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_I2C_IsDeviceReady+0x50>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e0fd      	b.n	80022ec <HAL_I2C_IsDeviceReady+0x24c>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d007      	beq.n	8002116 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f042 0201 	orr.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002124:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2224      	movs	r2, #36	; 0x24
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a70      	ldr	r2, [pc, #448]	; (80022f8 <HAL_I2C_IsDeviceReady+0x258>)
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002148:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f966 	bl	8002428 <I2C_WaitOnFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00d      	beq.n	800217e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002170:	d103      	bne.n	800217a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002178:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0b6      	b.n	80022ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800217e:	897b      	ldrh	r3, [r7, #10]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800218c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800218e:	f7ff fa71 	bl	8001674 <HAL_GetTick>
 8002192:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	bf0c      	ite	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	2300      	movne	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021c2:	e025      	b.n	8002210 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021c4:	f7ff fa56 	bl	8001674 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d302      	bcc.n	80021da <HAL_I2C_IsDeviceReady+0x13a>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	22a0      	movs	r2, #160	; 0xa0
 80021de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2ba0      	cmp	r3, #160	; 0xa0
 800221a:	d005      	beq.n	8002228 <HAL_I2C_IsDeviceReady+0x188>
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d102      	bne.n	8002228 <HAL_I2C_IsDeviceReady+0x188>
 8002222:	7dbb      	ldrb	r3, [r7, #22]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0cd      	beq.n	80021c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2220      	movs	r2, #32
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b02      	cmp	r3, #2
 800223c:	d129      	bne.n	8002292 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	2319      	movs	r3, #25
 800226a:	2201      	movs	r2, #1
 800226c:	4921      	ldr	r1, [pc, #132]	; (80022f4 <HAL_I2C_IsDeviceReady+0x254>)
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f8da 	bl	8002428 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e036      	b.n	80022ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2220      	movs	r2, #32
 8002282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e02c      	b.n	80022ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2319      	movs	r3, #25
 80022b2:	2201      	movs	r2, #1
 80022b4:	490f      	ldr	r1, [pc, #60]	; (80022f4 <HAL_I2C_IsDeviceReady+0x254>)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8b6 	bl	8002428 <I2C_WaitOnFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e012      	b.n	80022ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f4ff af32 	bcc.w	800213a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
  }
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	00100002 	.word	0x00100002
 80022f8:	ffff0000 	.word	0xffff0000

080022fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4603      	mov	r3, r0
 800230c:	817b      	strh	r3, [r7, #10]
 800230e:	460b      	mov	r3, r1
 8002310:	813b      	strh	r3, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	2200      	movs	r2, #0
 800232e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f878 	bl	8002428 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234c:	d103      	bne.n	8002356 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e05f      	b.n	800241a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	492d      	ldr	r1, [pc, #180]	; (8002424 <I2C_RequestMemoryWrite+0x128>)
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f8d3 	bl	800251c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e04c      	b.n	800241a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	6a39      	ldr	r1, [r7, #32]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 f95e 	bl	800265c <I2C_WaitOnTXEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d107      	bne.n	80023be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e02b      	b.n	800241a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023c8:	893b      	ldrh	r3, [r7, #8]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	e021      	b.n	8002418 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023d4:	893b      	ldrh	r3, [r7, #8]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f938 	bl	800265c <I2C_WaitOnTXEFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00d      	beq.n	800240e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d107      	bne.n	800240a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e005      	b.n	800241a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800240e:	893b      	ldrh	r3, [r7, #8]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	00010002 	.word	0x00010002

08002428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002438:	e048      	b.n	80024cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d044      	beq.n	80024cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002442:	f7ff f917 	bl	8001674 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d302      	bcc.n	8002458 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d139      	bne.n	80024cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	0c1b      	lsrs	r3, r3, #16
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d10d      	bne.n	800247e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	43da      	mvns	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4013      	ands	r3, r2
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	e00c      	b.n	8002498 <I2C_WaitOnFlagUntilTimeout+0x70>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	43da      	mvns	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4013      	ands	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	429a      	cmp	r2, r3
 800249c:	d116      	bne.n	80024cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e023      	b.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10d      	bne.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	43da      	mvns	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4013      	ands	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	e00c      	b.n	800250c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	43da      	mvns	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	429a      	cmp	r2, r3
 8002510:	d093      	beq.n	800243a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800252a:	e071      	b.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253a:	d123      	bne.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f043 0204 	orr.w	r2, r3, #4
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e067      	b.n	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258a:	d041      	beq.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258c:	f7ff f872 	bl	8001674 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	d302      	bcc.n	80025a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d136      	bne.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10c      	bne.n	80025c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4013      	ands	r3, r2
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e00b      	b.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	43da      	mvns	r2, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	4013      	ands	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e021      	b.n	8002654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10c      	bne.n	8002634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	43da      	mvns	r2, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4013      	ands	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e00b      	b.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4013      	ands	r3, r2
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f af6d 	bne.w	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002668:	e034      	b.n	80026d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f886 	bl	800277c <I2C_IsAcknowledgeFailed>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e034      	b.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d028      	beq.n	80026d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7fe fff7 	bl	8001674 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	429a      	cmp	r2, r3
 8002690:	d302      	bcc.n	8002698 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d11d      	bne.n	80026d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b80      	cmp	r3, #128	; 0x80
 80026a4:	d016      	beq.n	80026d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e007      	b.n	80026e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d1c3      	bne.n	800266a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026f8:	e034      	b.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f83e 	bl	800277c <I2C_IsAcknowledgeFailed>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e034      	b.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d028      	beq.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002712:	f7fe ffaf 	bl	8001674 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11d      	bne.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d016      	beq.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e007      	b.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d1c3      	bne.n	80026fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002792:	d11b      	bne.n	80027cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800279c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f043 0204 	orr.w	r2, r3, #4
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e272      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8087 	beq.w	8002906 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b04      	cmp	r3, #4
 8002802:	d00c      	beq.n	800281e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002804:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b08      	cmp	r3, #8
 800280e:	d112      	bne.n	8002836 <HAL_RCC_OscConfig+0x5e>
 8002810:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d10b      	bne.n	8002836 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281e:	4b89      	ldr	r3, [pc, #548]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d06c      	beq.n	8002904 <HAL_RCC_OscConfig+0x12c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d168      	bne.n	8002904 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e24c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x76>
 8002840:	4b80      	ldr	r3, [pc, #512]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a7f      	ldr	r2, [pc, #508]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	e02e      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b7b      	ldr	r3, [pc, #492]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a7a      	ldr	r2, [pc, #488]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800285c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b78      	ldr	r3, [pc, #480]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e01d      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0xbc>
 800287a:	4b72      	ldr	r3, [pc, #456]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a71      	ldr	r2, [pc, #452]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b6f      	ldr	r3, [pc, #444]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6e      	ldr	r2, [pc, #440]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0xd4>
 8002894:	4b6b      	ldr	r3, [pc, #428]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a6a      	ldr	r2, [pc, #424]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b68      	ldr	r3, [pc, #416]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a67      	ldr	r2, [pc, #412]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d013      	beq.n	80028dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fede 	bl	8001674 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe feda 	bl	8001674 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e200      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0xe4>
 80028da:	e014      	b.n	8002906 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe feca 	bl	8001674 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe fec6 	bl	8001674 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1ec      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x10c>
 8002902:	e000      	b.n	8002906 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d063      	beq.n	80029da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002912:	4b4c      	ldr	r3, [pc, #304]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d11c      	bne.n	8002964 <HAL_RCC_OscConfig+0x18c>
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d116      	bne.n	8002964 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e1c0      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4939      	ldr	r1, [pc, #228]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	e03a      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7fe fe7f 	bl	8001674 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297a:	f7fe fe7b 	bl	8001674 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1a1      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4927      	ldr	r1, [pc, #156]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	600b      	str	r3, [r1, #0]
 80029ac:	e015      	b.n	80029da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ae:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fe5e 	bl	8001674 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029bc:	f7fe fe5a 	bl	8001674 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e180      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03a      	beq.n	8002a5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d019      	beq.n	8002a22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7fe fe3e 	bl	8001674 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fc:	f7fe fe3a 	bl	8001674 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e160      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f000 face 	bl	8002fbc <RCC_Delay>
 8002a20:	e01c      	b.n	8002a5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_RCC_OscConfig+0x274>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7fe fe24 	bl	8001674 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2e:	e00f      	b.n	8002a50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7fe fe20 	bl	8001674 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d908      	bls.n	8002a50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e146      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000
 8002a48:	42420000 	.word	0x42420000
 8002a4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	4b92      	ldr	r3, [pc, #584]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e9      	bne.n	8002a30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a6 	beq.w	8002bb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b8b      	ldr	r3, [pc, #556]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b88      	ldr	r3, [pc, #544]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a87      	ldr	r2, [pc, #540]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	61d3      	str	r3, [r2, #28]
 8002a86:	4b85      	ldr	r3, [pc, #532]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b82      	ldr	r3, [pc, #520]	; (8002ca0 <HAL_RCC_OscConfig+0x4c8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b7f      	ldr	r3, [pc, #508]	; (8002ca0 <HAL_RCC_OscConfig+0x4c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7e      	ldr	r2, [pc, #504]	; (8002ca0 <HAL_RCC_OscConfig+0x4c8>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7fe fde1 	bl	8001674 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab6:	f7fe fddd 	bl	8001674 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b64      	cmp	r3, #100	; 0x64
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e103      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <HAL_RCC_OscConfig+0x4c8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x312>
 8002adc:	4b6f      	ldr	r3, [pc, #444]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a6e      	ldr	r2, [pc, #440]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	e02d      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0x334>
 8002af2:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a69      	ldr	r2, [pc, #420]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6213      	str	r3, [r2, #32]
 8002afe:	4b67      	ldr	r3, [pc, #412]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4a66      	ldr	r2, [pc, #408]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	f023 0304 	bic.w	r3, r3, #4
 8002b08:	6213      	str	r3, [r2, #32]
 8002b0a:	e01c      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x356>
 8002b14:	4b61      	ldr	r3, [pc, #388]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4a60      	ldr	r2, [pc, #384]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6213      	str	r3, [r2, #32]
 8002b20:	4b5e      	ldr	r3, [pc, #376]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a5d      	ldr	r2, [pc, #372]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0x36e>
 8002b2e:	4b5b      	ldr	r3, [pc, #364]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a5a      	ldr	r2, [pc, #360]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	4b58      	ldr	r3, [pc, #352]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a57      	ldr	r2, [pc, #348]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d015      	beq.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fd91 	bl	8001674 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fe fd8d 	bl	8001674 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e0b1      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ee      	beq.n	8002b56 <HAL_RCC_OscConfig+0x37e>
 8002b78:	e014      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fd7b 	bl	8001674 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fe fd77 	bl	8001674 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e09b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	4b40      	ldr	r3, [pc, #256]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ee      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4a3b      	ldr	r2, [pc, #236]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d061      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d146      	bne.n	8002c62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd4:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7fe fd4b 	bl	8001674 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be2:	f7fe fd47 	bl	8001674 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e06d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf4:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c08:	d108      	bne.n	8002c1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4921      	ldr	r1, [pc, #132]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1c:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a19      	ldr	r1, [r3, #32]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	491b      	ldr	r1, [pc, #108]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b1b      	ldr	r3, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fd1b 	bl	8001674 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe fd17 	bl	8001674 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e03d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x46a>
 8002c60:	e035      	b.n	8002cce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7fe fd04 	bl	8001674 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fd00 	bl	8001674 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e026      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x498>
 8002c8e:	e01e      	b.n	8002cce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e019      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_OscConfig+0x500>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d0      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 0207 	bic.w	r2, r3, #7
 8002d06:	4965      	ldr	r1, [pc, #404]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b63      	ldr	r3, [pc, #396]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0b8      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a52      	ldr	r2, [pc, #328]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	494d      	ldr	r1, [pc, #308]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d040      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d115      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e07f      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e073      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06b      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4936      	ldr	r1, [pc, #216]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fc52 	bl	8001674 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe fc4e 	bl	8001674 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e053      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d210      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 0207 	bic.w	r2, r3, #7
 8002e12:	4922      	ldr	r1, [pc, #136]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e032      	b.n	8002e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e38:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4916      	ldr	r1, [pc, #88]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e6a:	f000 f821 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	490a      	ldr	r1, [pc, #40]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7c:	5ccb      	ldrb	r3, [r1, r3]
 8002e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_ClockConfig+0x1d0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fbb0 	bl	80015f0 <HAL_InitTick>

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40022000 	.word	0x40022000
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08004730 	.word	0x08004730
 8002ea8:	20000004 	.word	0x20000004
 8002eac:	20000008 	.word	0x20000008

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eca:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d002      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x30>
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ede:	e027      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ee2:	613b      	str	r3, [r7, #16]
      break;
 8002ee4:	e027      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	0c9b      	lsrs	r3, r3, #18
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ef0:	5cd3      	ldrb	r3, [r2, r3]
 8002ef2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0c5b      	lsrs	r3, r3, #17
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f12:	fb03 f202 	mul.w	r2, r3, r2
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e004      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	613b      	str	r3, [r7, #16]
      break;
 8002f2e:	e002      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f32:	613b      	str	r3, [r7, #16]
      break;
 8002f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f36:	693b      	ldr	r3, [r7, #16]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	007a1200 	.word	0x007a1200
 8002f4c:	08004748 	.word	0x08004748
 8002f50:	08004758 	.word	0x08004758
 8002f54:	003d0900 	.word	0x003d0900

08002f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f5c:	4b02      	ldr	r3, [pc, #8]	; (8002f68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f70:	f7ff fff2 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08004740 	.word	0x08004740

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f98:	f7ff ffde 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0adb      	lsrs	r3, r3, #11
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	08004740 	.word	0x08004740

08002fbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <RCC_Delay+0x34>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <RCC_Delay+0x38>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0a5b      	lsrs	r3, r3, #9
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd8:	bf00      	nop
  }
  while (Delay --);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	60fa      	str	r2, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f9      	bne.n	8002fd8 <RCC_Delay+0x1c>
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	20000004 	.word	0x20000004
 8002ff4:	10624dd3 	.word	0x10624dd3

08002ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e041      	b.n	800308e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe f9be 	bl	80013a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	4619      	mov	r1, r3
 8003036:	4610      	mov	r0, r2
 8003038:	f000 fcfa 	bl	8003a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <HAL_TIM_PWM_Start+0x24>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	e022      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d109      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x3e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	e015      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d109      	bne.n	80030f0 <HAL_TIM_PWM_Start+0x58>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e008      	b.n	8003102 <HAL_TIM_PWM_Start+0x6a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e05e      	b.n	80031c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0x82>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	e013      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b04      	cmp	r3, #4
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start+0x92>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	e00b      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0xa2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003138:	e003      	b.n	8003142 <HAL_TIM_PWM_Start+0xaa>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2202      	movs	r2, #2
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2201      	movs	r2, #1
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ff67 	bl	800401e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_TIM_PWM_Start+0x138>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d107      	bne.n	800316a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_TIM_PWM_Start+0x138>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_TIM_PWM_Start+0xfa>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d009      	beq.n	8003192 <HAL_TIM_PWM_Start+0xfa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_TIM_PWM_Start+0x13c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIM_PWM_Start+0xfa>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <HAL_TIM_PWM_Start+0x140>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d111      	bne.n	80031b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b06      	cmp	r3, #6
 80031a2:	d010      	beq.n	80031c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	e007      	b.n	80031c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800

080031dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e041      	b.n	8003272 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fe f852 	bl	80012ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 fc08 	bl	8003a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d104      	bne.n	800329a <HAL_TIM_IC_Start_IT+0x1e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e013      	b.n	80032c2 <HAL_TIM_IC_Start_IT+0x46>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d104      	bne.n	80032aa <HAL_TIM_IC_Start_IT+0x2e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e00b      	b.n	80032c2 <HAL_TIM_IC_Start_IT+0x46>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_IC_Start_IT+0x3e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	e003      	b.n	80032c2 <HAL_TIM_IC_Start_IT+0x46>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <HAL_TIM_IC_Start_IT+0x58>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e013      	b.n	80032fc <HAL_TIM_IC_Start_IT+0x80>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d104      	bne.n	80032e4 <HAL_TIM_IC_Start_IT+0x68>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e00b      	b.n	80032fc <HAL_TIM_IC_Start_IT+0x80>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d104      	bne.n	80032f4 <HAL_TIM_IC_Start_IT+0x78>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e003      	b.n	80032fc <HAL_TIM_IC_Start_IT+0x80>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032fe:	7bbb      	ldrb	r3, [r7, #14]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003304:	7b7b      	ldrb	r3, [r7, #13]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0b8      	b.n	8003480 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d104      	bne.n	800331e <HAL_TIM_IC_Start_IT+0xa2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800331c:	e013      	b.n	8003346 <HAL_TIM_IC_Start_IT+0xca>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d104      	bne.n	800332e <HAL_TIM_IC_Start_IT+0xb2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	e00b      	b.n	8003346 <HAL_TIM_IC_Start_IT+0xca>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d104      	bne.n	800333e <HAL_TIM_IC_Start_IT+0xc2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333c:	e003      	b.n	8003346 <HAL_TIM_IC_Start_IT+0xca>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d104      	bne.n	8003356 <HAL_TIM_IC_Start_IT+0xda>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	e013      	b.n	800337e <HAL_TIM_IC_Start_IT+0x102>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b04      	cmp	r3, #4
 800335a:	d104      	bne.n	8003366 <HAL_TIM_IC_Start_IT+0xea>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003364:	e00b      	b.n	800337e <HAL_TIM_IC_Start_IT+0x102>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d104      	bne.n	8003376 <HAL_TIM_IC_Start_IT+0xfa>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003374:	e003      	b.n	800337e <HAL_TIM_IC_Start_IT+0x102>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b0c      	cmp	r3, #12
 8003382:	d841      	bhi.n	8003408 <HAL_TIM_IC_Start_IT+0x18c>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <HAL_TIM_IC_Start_IT+0x110>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033c1 	.word	0x080033c1
 8003390:	08003409 	.word	0x08003409
 8003394:	08003409 	.word	0x08003409
 8003398:	08003409 	.word	0x08003409
 800339c:	080033d3 	.word	0x080033d3
 80033a0:	08003409 	.word	0x08003409
 80033a4:	08003409 	.word	0x08003409
 80033a8:	08003409 	.word	0x08003409
 80033ac:	080033e5 	.word	0x080033e5
 80033b0:	08003409 	.word	0x08003409
 80033b4:	08003409 	.word	0x08003409
 80033b8:	08003409 	.word	0x08003409
 80033bc:	080033f7 	.word	0x080033f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0202 	orr.w	r2, r2, #2
 80033ce:	60da      	str	r2, [r3, #12]
      break;
 80033d0:	e01d      	b.n	800340e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0204 	orr.w	r2, r2, #4
 80033e0:	60da      	str	r2, [r3, #12]
      break;
 80033e2:	e014      	b.n	800340e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0208 	orr.w	r2, r2, #8
 80033f2:	60da      	str	r2, [r3, #12]
      break;
 80033f4:	e00b      	b.n	800340e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0210 	orr.w	r2, r2, #16
 8003404:	60da      	str	r2, [r3, #12]
      break;
 8003406:	e002      	b.n	800340e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
      break;
 800340c:	bf00      	nop
  }

  if (status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d134      	bne.n	800347e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2201      	movs	r2, #1
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fdfe 	bl	800401e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_TIM_IC_Start_IT+0x20c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00e      	beq.n	800344a <HAL_TIM_IC_Start_IT+0x1ce>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d009      	beq.n	800344a <HAL_TIM_IC_Start_IT+0x1ce>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a14      	ldr	r2, [pc, #80]	; (800348c <HAL_TIM_IC_Start_IT+0x210>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_TIM_IC_Start_IT+0x1ce>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_TIM_IC_Start_IT+0x214>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d111      	bne.n	800346e <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b06      	cmp	r3, #6
 800345a:	d010      	beq.n	800347e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346c:	e007      	b.n	800347e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800

08003494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0202 	mvn.w	r2, #2
 80034c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fdd4 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa8b 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa91 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b04      	cmp	r3, #4
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0204 	mvn.w	r2, #4
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fdaa 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa61 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa67 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0208 	mvn.w	r2, #8
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fd80 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa37 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa3d 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d122      	bne.n	80035ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0210 	mvn.w	r2, #16
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2208      	movs	r2, #8
 80035c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd fd56 	bl	8001084 <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa0d 	bl	80039fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fa13 	bl	8003a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10e      	bne.n	8003618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d107      	bne.n	8003618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0201 	mvn.w	r2, #1
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f9e8 	bl	80039e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	2b80      	cmp	r3, #128	; 0x80
 8003624:	d10e      	bne.n	8003644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003630:	2b80      	cmp	r3, #128	; 0x80
 8003632:	d107      	bne.n	8003644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fd79 	bl	8004136 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d10e      	bne.n	8003670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d107      	bne.n	8003670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f9d7 	bl	8003a1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b20      	cmp	r3, #32
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0220 	mvn.w	r2, #32
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fd44 	bl	8004124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e088      	b.n	80037d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036e0:	f000 fb90 	bl	8003e04 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 020c 	bic.w	r2, r2, #12
 80036f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6999      	ldr	r1, [r3, #24]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	619a      	str	r2, [r3, #24]
 8003706:	e060      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b04      	cmp	r3, #4
 800370c:	d11c      	bne.n	8003748 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800371e:	f000 fbcb 	bl	8003eb8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003730:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6999      	ldr	r1, [r3, #24]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	021a      	lsls	r2, r3, #8
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	619a      	str	r2, [r3, #24]
 8003746:	e040      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b08      	cmp	r3, #8
 800374c:	d11b      	bne.n	8003786 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800375e:	f000 fbe7 	bl	8003f30 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 020c 	bic.w	r2, r2, #12
 8003770:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69d9      	ldr	r1, [r3, #28]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	61da      	str	r2, [r3, #28]
 8003784:	e021      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	d11c      	bne.n	80037c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800379c:	f000 fc03 	bl	8003fa6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69d9      	ldr	r1, [r3, #28]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	021a      	lsls	r2, r3, #8
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	61da      	str	r2, [r3, #28]
 80037c4:	e001      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e0ae      	b.n	8003958 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b0c      	cmp	r3, #12
 8003806:	f200 809f 	bhi.w	8003948 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800380a:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	08003845 	.word	0x08003845
 8003814:	08003949 	.word	0x08003949
 8003818:	08003949 	.word	0x08003949
 800381c:	08003949 	.word	0x08003949
 8003820:	08003885 	.word	0x08003885
 8003824:	08003949 	.word	0x08003949
 8003828:	08003949 	.word	0x08003949
 800382c:	08003949 	.word	0x08003949
 8003830:	080038c7 	.word	0x080038c7
 8003834:	08003949 	.word	0x08003949
 8003838:	08003949 	.word	0x08003949
 800383c:	08003949 	.word	0x08003949
 8003840:	08003907 	.word	0x08003907
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f952 	bl	8003af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0208 	orr.w	r2, r2, #8
 800385e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6999      	ldr	r1, [r3, #24]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	619a      	str	r2, [r3, #24]
      break;
 8003882:	e064      	b.n	800394e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f998 	bl	8003bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6999      	ldr	r1, [r3, #24]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	021a      	lsls	r2, r3, #8
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	619a      	str	r2, [r3, #24]
      break;
 80038c4:	e043      	b.n	800394e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 f9e1 	bl	8003c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0208 	orr.w	r2, r2, #8
 80038e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0204 	bic.w	r2, r2, #4
 80038f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69d9      	ldr	r1, [r3, #28]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	61da      	str	r2, [r3, #28]
      break;
 8003904:	e023      	b.n	800394e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fa2b 	bl	8003d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69d9      	ldr	r1, [r3, #28]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	021a      	lsls	r2, r3, #8
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	61da      	str	r2, [r3, #28]
      break;
 8003946:	e002      	b.n	800394e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]
      break;
 800394c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003956:	7dfb      	ldrb	r3, [r7, #23]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d831      	bhi.n	80039d8 <HAL_TIM_ReadCapturedValue+0x78>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	080039b1 	.word	0x080039b1
 8003980:	080039d9 	.word	0x080039d9
 8003984:	080039d9 	.word	0x080039d9
 8003988:	080039d9 	.word	0x080039d9
 800398c:	080039bb 	.word	0x080039bb
 8003990:	080039d9 	.word	0x080039d9
 8003994:	080039d9 	.word	0x080039d9
 8003998:	080039d9 	.word	0x080039d9
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039d9 	.word	0x080039d9
 80039a4:	080039d9 	.word	0x080039d9
 80039a8:	080039d9 	.word	0x080039d9
 80039ac:	080039cf 	.word	0x080039cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	60fb      	str	r3, [r7, #12]

      break;
 80039b8:	e00f      	b.n	80039da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	60fb      	str	r3, [r7, #12]

      break;
 80039c2:	e00a      	b.n	80039da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	60fb      	str	r3, [r7, #12]

      break;
 80039cc:	e005      	b.n	80039da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	60fb      	str	r3, [r7, #12]

      break;
 80039d6:	e000      	b.n	80039da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80039d8:	bf00      	nop
  }

  return tmpreg;
 80039da:	68fb      	ldr	r3, [r7, #12]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop

080039e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a29      	ldr	r2, [pc, #164]	; (8003ae8 <TIM_Base_SetConfig+0xb8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_Base_SetConfig+0x30>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4e:	d007      	beq.n	8003a60 <TIM_Base_SetConfig+0x30>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a26      	ldr	r2, [pc, #152]	; (8003aec <TIM_Base_SetConfig+0xbc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_Base_SetConfig+0x30>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a25      	ldr	r2, [pc, #148]	; (8003af0 <TIM_Base_SetConfig+0xc0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <TIM_Base_SetConfig+0xb8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <TIM_Base_SetConfig+0xbc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <TIM_Base_SetConfig+0xc0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <TIM_Base_SetConfig+0xb8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d103      	bne.n	8003ad8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	615a      	str	r2, [r3, #20]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800

08003af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f023 0201 	bic.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0302 	bic.w	r3, r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <TIM_OC1_SetConfig+0xc8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0308 	bic.w	r3, r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <TIM_OC1_SetConfig+0xc8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d111      	bne.n	8003b96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40012c00 	.word	0x40012c00

08003bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f023 0210 	bic.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	021b      	lsls	r3, r3, #8
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f023 0320 	bic.w	r3, r3, #32
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <TIM_OC2_SetConfig+0xd0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10d      	bne.n	8003c3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <TIM_OC2_SetConfig+0xd0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d113      	bne.n	8003c6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	40012c00 	.word	0x40012c00

08003c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <TIM_OC3_SetConfig+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10d      	bne.n	8003d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <TIM_OC3_SetConfig+0xd0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d113      	bne.n	8003d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012c00 	.word	0x40012c00

08003d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <TIM_OC4_SetConfig+0x98>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00

08003e04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f023 0201 	bic.w	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <TIM_TI1_SetConfig+0xa8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_TI1_SetConfig+0x46>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d007      	beq.n	8003e4a <TIM_TI1_SetConfig+0x46>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <TIM_TI1_SetConfig+0xac>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_TI1_SetConfig+0x46>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <TIM_TI1_SetConfig+0xb0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <TIM_TI1_SetConfig+0x4a>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <TIM_TI1_SetConfig+0x4c>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e003      	b.n	8003e6e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f023 030a 	bic.w	r3, r3, #10
 8003e88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f003 030a 	and.w	r3, r3, #10
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800

08003eb8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f023 0210 	bic.w	r2, r3, #16
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	021b      	lsls	r3, r3, #8
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	031b      	lsls	r3, r3, #12
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	621a      	str	r2, [r3, #32]
}
 8003f26:	bf00      	nop
 8003f28:	371c      	adds	r7, #28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f023 0303 	bic.w	r3, r3, #3
 8003f5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f80:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bc80      	pop	{r7}
 8003fa4:	4770      	bx	lr

08003fa6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	031b      	lsls	r3, r3, #12
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800401e:	b480      	push	{r7}
 8004020:	b087      	sub	sp, #28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2201      	movs	r2, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	43db      	mvns	r3, r3
 8004040:	401a      	ands	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1a      	ldr	r2, [r3, #32]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	431a      	orrs	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
	...

08004068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800407c:	2302      	movs	r3, #2
 800407e:	e046      	b.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a16      	ldr	r2, [pc, #88]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040cc:	d009      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a10      	ldr	r2, [pc, #64]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10c      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800

08004124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e042      	b.n	80041e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd f966 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	; 0x24
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800418a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f91d 	bl	80043cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	; 0x28
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b20      	cmp	r3, #32
 8004206:	d16d      	bne.n	80042e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_UART_Transmit+0x2c>
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e066      	b.n	80042e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2221      	movs	r2, #33	; 0x21
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004226:	f7fd fa25 	bl	8001674 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	88fa      	ldrh	r2, [r7, #6]
 8004236:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004240:	d108      	bne.n	8004254 <HAL_UART_Transmit+0x6c>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	e003      	b.n	800425c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800425c:	e02a      	b.n	80042b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f840 	bl	80042ee <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e036      	b.n	80042e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800428c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	3302      	adds	r3, #2
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e007      	b.n	80042a6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	781a      	ldrb	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1cf      	bne.n	800425e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2140      	movs	r1, #64	; 0x40
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f810 	bl	80042ee <UART_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3720      	adds	r7, #32
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b090      	sub	sp, #64	; 0x40
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fe:	e050      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d04c      	beq.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <UART_WaitOnFlagUntilTimeout+0x30>
 800430e:	f7fd f9b1 	bl	8001674 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800431a:	429a      	cmp	r2, r3
 800431c:	d241      	bcs.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	330c      	adds	r3, #12
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800433e:	637a      	str	r2, [r7, #52]	; 0x34
 8004340:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e5      	bne.n	800431e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3314      	adds	r3, #20
 8004358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	613b      	str	r3, [r7, #16]
   return(result);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	63bb      	str	r3, [r7, #56]	; 0x38
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3314      	adds	r3, #20
 8004370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004372:	623a      	str	r2, [r7, #32]
 8004374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	69f9      	ldr	r1, [r7, #28]
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e5      	bne.n	8004352 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e00f      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d09f      	beq.n	8004300 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3740      	adds	r7, #64	; 0x40
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004406:	f023 030c 	bic.w	r3, r3, #12
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	430b      	orrs	r3, r1
 8004412:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2c      	ldr	r2, [pc, #176]	; (80044e0 <UART_SetConfig+0x114>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d103      	bne.n	800443c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004434:	f7fe fdae 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	e002      	b.n	8004442 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800443c:	f7fe fd96 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 8004440:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009a      	lsls	r2, r3, #2
 800444c:	441a      	add	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <UART_SetConfig+0x118>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	0119      	lsls	r1, r3, #4
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	009a      	lsls	r2, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	fbb2 f2f3 	udiv	r2, r2, r3
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <UART_SetConfig+0x118>)
 800447a:	fba3 0302 	umull	r0, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2064      	movs	r0, #100	; 0x64
 8004482:	fb00 f303 	mul.w	r3, r0, r3
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	3332      	adds	r3, #50	; 0x32
 800448c:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <UART_SetConfig+0x118>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004498:	4419      	add	r1, r3
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	009a      	lsls	r2, r3, #2
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <UART_SetConfig+0x118>)
 80044b2:	fba3 0302 	umull	r0, r3, r3, r2
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	2064      	movs	r0, #100	; 0x64
 80044ba:	fb00 f303 	mul.w	r3, r0, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	3332      	adds	r3, #50	; 0x32
 80044c4:	4a07      	ldr	r2, [pc, #28]	; (80044e4 <UART_SetConfig+0x118>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	f003 020f 	and.w	r2, r3, #15
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	440a      	add	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40013800 	.word	0x40013800
 80044e4:	51eb851f 	.word	0x51eb851f

080044e8 <Write16>:
	return ((Value[0] << 8) | Value[1]);
}


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af04      	add	r7, sp, #16
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
 80044f4:	4613      	mov	r3, r2
 80044f6:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80044f8:	883b      	ldrh	r3, [r7, #0]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8004502:	883b      	ldrh	r3, [r7, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	b29a      	uxth	r2, r3
 8004510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004514:	9302      	str	r3, [sp, #8]
 8004516:	2302      	movs	r3, #2
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	2301      	movs	r3, #1
 8004522:	2180      	movs	r1, #128	; 0x80
 8004524:	f7fd fcc2 	bl	8001eac <HAL_I2C_Mem_Write>
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <INA219_Reset>:

	return (result * 0.01 );
}

void INA219_Reset(INA219_t *ina219)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8004538:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800453c:	2100      	movs	r1, #0
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ffd2 	bl	80044e8 <Write16>
	HAL_Delay(1);
 8004544:	2001      	movs	r0, #1
 8004546:	f7fd f89f 	bl	8001688 <HAL_Delay>
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b082      	sub	sp, #8
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	460b      	mov	r3, r1
 800455c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	461a      	mov	r2, r3
 8004562:	2105      	movs	r1, #5
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ffbf 	bl	80044e8 <Write16>
}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	460b      	mov	r3, r1
 800457c:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 800457e:	887b      	ldrh	r3, [r7, #2]
 8004580:	461a      	mov	r2, r3
 8004582:	2100      	movs	r1, #0
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff ffaf 	bl	80044e8 <Write16>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 800459c:	f643 139f 	movw	r3, #14751	; 0x399f
 80045a0:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <INA219_setCalibration_32V_2A+0x40>)
 80045a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045a8:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <INA219_setCalibration_32V_2A+0x44>)
 80045ac:	220a      	movs	r2, #10
 80045ae:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <INA219_setCalibration_32V_2A+0x48>)
 80045b2:	2202      	movs	r2, #2
 80045b4:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <INA219_setCalibration_32V_2A+0x40>)
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ffc8 	bl	8004552 <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80045c2:	89fb      	ldrh	r3, [r7, #14]
 80045c4:	4619      	mov	r1, r3
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ffd3 	bl	8004572 <INA219_setConfig>
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000254 	.word	0x20000254
 80045d8:	20000256 	.word	0x20000256
 80045dc:	20000258 	.word	0x20000258

080045e0 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	79fa      	ldrb	r2, [r7, #7]
 80045f8:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <INA219_Init+0x5c>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <INA219_Init+0x60>)
 8004602:	2200      	movs	r2, #0
 8004604:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	b29b      	uxth	r3, r3
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	b299      	uxth	r1, r3
 800460e:	2302      	movs	r3, #2
 8004610:	2203      	movs	r2, #3
 8004612:	68b8      	ldr	r0, [r7, #8]
 8004614:	f7fd fd44 	bl	80020a0 <HAL_I2C_IsDeviceReady>
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d107      	bne.n	8004632 <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff ff84 	bl	8004530 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff ffb3 	bl	8004594 <INA219_setCalibration_32V_2A>

		return 1;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <INA219_Init+0x54>
	}

	else
	{
		return 0;
 8004632:	2300      	movs	r3, #0
	}
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20000256 	.word	0x20000256
 8004640:	20000258 	.word	0x20000258

08004644 <CALC_FREQ>:
 *
 *  Created on: Aug 8, 2024
 *      Author: Никита
 */
#include "PWM.h"
void CALC_FREQ(PWM *pwm) {
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

	if (pwm->end_per > pwm->start) // Все три точки были в одном периоде таймера
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	889a      	ldrh	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d92b      	bls.n	80046b0 <CALC_FREQ+0x6c>
			{
		pwm->period = pwm->end_per - pwm->start;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	889a      	ldrh	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	80da      	strh	r2, [r3, #6]
		pwm->long_imp = pwm->end_imp - pwm->start;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	885b      	ldrh	r3, [r3, #2]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	b2da      	uxtb	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	729a      	strb	r2, [r3, #10]
		if (pwm->period > 0) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	88db      	ldrh	r3, [r3, #6]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <CALC_FREQ+0x6c>
			pwm->freq = 1000000 / pwm->period;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	88db      	ldrh	r3, [r3, #6]
 8004688:	461a      	mov	r2, r3
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <CALC_FREQ+0x78>)
 800468c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	819a      	strh	r2, [r3, #12]
			pwm->fill_factor = (pwm->long_imp * 100) / pwm->period;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	7a9b      	ldrb	r3, [r3, #10]
 800469a:	461a      	mov	r2, r3
 800469c:	2364      	movs	r3, #100	; 0x64
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	88d2      	ldrh	r2, [r2, #6]
 80046a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	811a      	strh	r2, [r3, #8]
		}
	}
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	000f4240 	.word	0x000f4240

080046c0 <memset>:
 80046c0:	4603      	mov	r3, r0
 80046c2:	4402      	add	r2, r0
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d100      	bne.n	80046ca <memset+0xa>
 80046c8:	4770      	bx	lr
 80046ca:	f803 1b01 	strb.w	r1, [r3], #1
 80046ce:	e7f9      	b.n	80046c4 <memset+0x4>

080046d0 <__libc_init_array>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	2600      	movs	r6, #0
 80046d4:	4d0c      	ldr	r5, [pc, #48]	; (8004708 <__libc_init_array+0x38>)
 80046d6:	4c0d      	ldr	r4, [pc, #52]	; (800470c <__libc_init_array+0x3c>)
 80046d8:	1b64      	subs	r4, r4, r5
 80046da:	10a4      	asrs	r4, r4, #2
 80046dc:	42a6      	cmp	r6, r4
 80046de:	d109      	bne.n	80046f4 <__libc_init_array+0x24>
 80046e0:	f000 f81a 	bl	8004718 <_init>
 80046e4:	2600      	movs	r6, #0
 80046e6:	4d0a      	ldr	r5, [pc, #40]	; (8004710 <__libc_init_array+0x40>)
 80046e8:	4c0a      	ldr	r4, [pc, #40]	; (8004714 <__libc_init_array+0x44>)
 80046ea:	1b64      	subs	r4, r4, r5
 80046ec:	10a4      	asrs	r4, r4, #2
 80046ee:	42a6      	cmp	r6, r4
 80046f0:	d105      	bne.n	80046fe <__libc_init_array+0x2e>
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f8:	4798      	blx	r3
 80046fa:	3601      	adds	r6, #1
 80046fc:	e7ee      	b.n	80046dc <__libc_init_array+0xc>
 80046fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004702:	4798      	blx	r3
 8004704:	3601      	adds	r6, #1
 8004706:	e7f2      	b.n	80046ee <__libc_init_array+0x1e>
 8004708:	0800475c 	.word	0x0800475c
 800470c:	0800475c 	.word	0x0800475c
 8004710:	0800475c 	.word	0x0800475c
 8004714:	08004760 	.word	0x08004760

08004718 <_init>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr

08004724 <_fini>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	bf00      	nop
 8004728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472a:	bc08      	pop	{r3}
 800472c:	469e      	mov	lr, r3
 800472e:	4770      	bx	lr
